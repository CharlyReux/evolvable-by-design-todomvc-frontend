#!/usr/bin/env python3


import argparse
import os
import json
import sys
import logging
import pickle
import time
import shutil
import subprocess
import signal

################### CONSTANTS ########################
STD_SUBPROCESS = {
    "stdin": subprocess.PIPE,
    "stdout": None,
    "stderr": subprocess.PIPE,
}

################### LOGGING SETUP ########################


class CustomFormatter(logging.Formatter):
    grey = "\x1b[38;21m"
    blue = "\x1b[38;5;39m"
    yellow = "\x1b[38;5;226m"
    red = "\x1b[38;5;196m"
    bold_red = "\x1b[31;1m"
    reset = "\x1b[0m"

    def __init__(self, fmt):
        super().__init__()
        self.fmt = fmt
        self.FORMATS = {
            logging.DEBUG: self.grey + self.fmt + self.reset,
            logging.INFO: self.blue + self.fmt + self.reset,
            logging.WARNING: self.yellow + self.fmt + self.reset,
            logging.ERROR: self.red + self.fmt + self.reset,
            logging.CRITICAL: self.bold_red + self.fmt + self.reset,
        }

    def format(self, record):
        log_fmt = self.FORMATS.get(record.levelno)
        formatter = logging.Formatter(log_fmt)
        return formatter.format(record)


# logging.basicConfig(level=logging.INFO)
fmt = "%(message)s"
stdout_handler = logging.StreamHandler()
stdout_handler.setLevel(logging.DEBUG)
stdout_handler.setFormatter(CustomFormatter(fmt))
logger = logging.getLogger(__name__)
logger.addHandler(stdout_handler)
logger.setLevel(logging.DEBUG)


################### UTILITARY METHODS ########################
def get_implem(participant_number):
    participants_config = os.path.join(script_dir, ".experiment/participants.json")
    with open(participants_config, "r") as participants_file:
        participants_data = json.load(participants_file)
    return participants_data[participant_number]["implementations"]


################### STATE_CLASS ########################
class participantState:
    def __init__(self, participant_number) -> None:
        self.participant_number = participant_number
        self.cur_step = 0
        self.steps = {}
        self.implems = get_implem(participant_number)
        subprocess.run(
            ["git", "checkout", "-b", f"participant{self.participant_number}"],
            **STD_SUBPROCESS,
        )
        process = subprocess.Popen(
            ["java", "-jar", f"{script_dir}/.experiment/apps/start.jar"],
            preexec_fn=os.setsid,
            **STD_SUBPROCESS,
        )
        shutil.copyfile(
            os.path.join(script_dir, ".experiment/docs", "start.yml"),
            os.path.join(script_dir, "./openapi.yml"),
        )
        self.steps[self.implems[self.cur_step]] = time.time()
        self.backend_pid = process.pid

    def save(self):
        with open(participant_state_path, "wb") as participant_state:
            pickle.dump(self, participant_state)

    def load():
        with open(participant_state_path, "rb") as participant_state:
            return pickle.load(participant_state)

    def previous_step(self):
        self.cur_step -= 1  # only for debuging purposes

    def advance(self):
        # updating the step
        self.cur_step += 1
        self.steps[self.implems[self.cur_step]] = time.time()
        # checking if this is the end of the experiment
        if not self.next_step():
            with open(script_dir + "/experiment-data.json", "w", encoding="utf-8") as f:
                json.dump(
                    self, f, ensure_ascii=False, default=lambda o: o.__dict__, indent=4
                )
            logger.info(
                "End of the experiment, Your experiment report has been generated at "
                + script_dir
                + "/experiment-data.json"
            )
            logger.info("please send it to charly.reux@inria.fr")
            logger.info("Thanks for participating!")
            sys.exit(0)
        # stopping the backend implementation
        try:
            os.kill(self.backend_pid, signal.SIGTERM)
            logger.info("former version of the backend has been stopped.")
        except:
            logger.warning("No backend running, still advancing to next step")

        subprocess.run(["git", "add", "."], **STD_SUBPROCESS)
        subprocess.run(["git", "commit", "-m", self.current_step()], **STD_SUBPROCESS)

        ##if we have implemented a "first implementation", we tag the commit in order to get back to it when arriving in the second set
        if "first_implementation" in self.current_step():
            subprocess.run(["git", "tag", self.current_step()])
        ## if the next step is a first evolution, and the current step is not a first implementation, we put the current implementation to the previous version
        elif "evo1" in self.next_step():
            approach = self.current_step().split("-")[0]
            subprocess.run(
                [
                    "git",
                    "checkout",
                    "-b",
                    self.next_step(),
                    f"{approach}-first_implementation",
                ],
                **STD_SUBPROCESS,
            )
        # if the next step is a first implementation, we roll back to the empty frontend implementation
        elif "first_implementation" in self.next_step():
            subprocess.run(
                [
                    "git",
                    "checkout",
                    "-b",
                    f"participant{self.participant_number}-second_impl",
                    "experiment-start",
                ],
                **STD_SUBPROCESS,
            )

        if "set" in state.next_step():
            version_path = self.next_step().split("-")[1]
        else:
            version_path = "start"
        # copying the openapi file of the next version
        shutil.copyfile(
            os.path.join(script_dir, ".experiment/docs", version_path + ".yml"),
            os.path.join(script_dir, "./openapi.yml"),
        )
        logger.info("The new version of the openapi specification file is available at the root of the project at openapi.yml")

        # starting the next version of the backend
        process = subprocess.Popen(
            ["java", "-jar", f"{script_dir}/.experiment/apps/{version_path}.jar"],
            preexec_fn=os.setsid,
            **STD_SUBPROCESS,
        )
        logger.info("New version of the backend has started, with pid: "+str(process.pid))

        self.backend_pid = process.pid

    def current_step(self) -> str:
        return self.implems[self.cur_step]

    def next_step(self) -> str:
        if self.cur_step + 1 >= len(self.implems):
            return None
        return self.implems[self.cur_step + 1]

    def verify_exist():
        if not os.path.exists(participant_state_path):
            logger.error(
                """You have not set up your participant number yet, please run

./experiment -s <YOUR_NUMBER>

"""
            )
            sys.exit(10)

    def __str__(self) -> str:
        return f"participant_number: {self.participant_number}, current_step: {self.current_step()}, next_step: {self.next_step()}"

    def __repr__(self) -> str:
        return self.__str__()


################### SCRIPT ########################
# argument parsing
parser = argparse.ArgumentParser(description="Description of your script")
parser.add_argument("-s", "--set-participant-number", help="Number of the participant")
parser.add_argument(
    "-n",
    "--next-step",
    help="goes forward one step in the experiment",
    action="store_true",
)


args = parser.parse_args()

# Getting the script dir and the config(of the current participant) file path
script_dir = os.path.dirname(__file__)
participant_state_path = os.path.join(script_dir, ".experiment/participant_state")

# initial first set up, that configurates the current participant
if args.set_participant_number:
    if os.path.exists(participant_state_path):
        logger.warning(
            "Running this command will overwrite your existing previous state"
        )
        user_validation = input(
            f"Are you sure that you want to set your reset your state?[y,n]"
        )
        if user_validation == "n":
            logger.warning("Cancelled")
            sys.exit(0)
        elif user_validation != "y":
            logger.error("Input not recognized, cancelling")
            sys.exit(0)

    logger.info("Participant number set: {}".format(args.set_participant_number))

    logger.info("Setting_up...")
    state: participantState = participantState(args.set_participant_number)

    logger.info("The experiment now begins.")
    logger.info(
        "you will start with the {} approach".format(state.next_step().split("-")[0])
    )
    logger.info(
        "Follow the instructions in the README of this repository, starting with the sub-section 'First Implementation' in the section of the {} approach".format(
            state.next_step().split("-")[0]
        )
    )
    state.save()
    sys.exit(0)

# Experiment continuation
## Checking that the initial setup has been done
participantState.verify_exist()

## loading the state data
state: participantState = participantState.load()
if args.next_step:
    logger.warning(f"You have implemented {state.next_step()} and you interface work.")
    logger.warning("There is no going backward")
    user_validation = input(
        f"Are you sure that you want to advance to the next step?[y,n]"
    )
    if user_validation == "n":
        logger.warning("Cancelled... Not advancing to next step")
        sys.exit(0)
    elif user_validation == "y":
        logger.warning("Advancing to next step")
        state.advance()
    else:
        logger.error("Input not recognized, cancelling")
    logger.debug(state)  # debug TODO:remove
    logger.info(
        "The experiment now continues, you can now implement the {}".format(
            state.next_step()
        )
    )
    state.save()
